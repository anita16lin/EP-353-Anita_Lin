(cd)(defobject sinegrain (i)   ((ins :initform 101) graindur grainamp grainfreq (ftable :initform 2) (pan :initform 0.5))  (:parameters ins (time :decimals 6) (graindur :decimals 6) grainamp grainfreq ftable pan))(defobject fmgrain (i)  ((ins :initform 102) graindur grainamp graincarfreq grainmodfreq index (ftable :initform 2) (pan :initform 0.5))  (:parameters ins (time :decimals 6) (graindur :decimals 6) grainamp	       graincarfreq grainmodfreq index ftable pan))(defun shatter (start-time duration density &key		       (disttype :uniform)		       (startgraindur 0.1)		       (endgraindur 0.2)		       (vargraindur 0.01)		       (startgrainamp -18.0)		       (endgrainamp -24.0)		       (vargrainamp 3.0)		       (startgrainfreq 100.0)		       (endgrainfreq 100.0)		       (vargrainfreq 2)		       (pan 0.5)		       (mod-freq-ratio 2.0)		       (startmod-index 2.5)		       (endmod-index 0.5)		       (varmod-index 0.25))  (print "Inside shatter")  (setf times (loop repeat density		collect (ran :type :exp :a 2.5)))  (setf sorted-times (new cycle of (sort times #'<)))  (loop repeat density    for time = (+ (next sorted-times) start-time)    for n = (/ (- time start-time) duration)    for graindur = (+ (* n (- endgraindur startgraindur)) 		      startgraindur		      (ran :type disttype :from (- vargraindur) :below vargraindur))    for grainamp = (+ (* n (- endgrainamp startgrainamp)) 		      startgrainamp		      (ran :type disttype :from (- vargrainamp) :below vargrainamp))    for basegrainfreq = (+ (* n (- endgrainfreq startgrainfreq)) 			   startgrainfreq			   (ran :type disttype :from (- vargrainfreq) :below vargrainfreq))    for mod-index = (+ (* n (- endmod-index startmod-index))		       startmod-index		       (ran :type disttype :from (- varmod-index) :below varmod-index))    for grainpan = (+ pan (/ (ran :type :gauss) 6))    for harmonic = (+ (ran :type :poisson :a 3.5) 1)    for grainfreq = (* basegrainfreq harmonic)    do (if (> grainpan 1) (setf grainpan 1))    do (if (< grainpan 0) (setf grainpan 0))    collect     (if (and mod-freq-ratio mod-index)	(new fmgrain	     :time time	     :graindur graindur	     :grainamp grainamp	     :graincarfreq grainfreq	     :grainmodfreq (* grainfreq mod-freq-ratio)	     :index (ran :type :gamma :a mod-index)	     :pan grainpan)      (new sinegrain	   :time time	   :graindur graindur	   :grainfreq grainfreq	   :grainamp grainamp	   :pan grainpan))    )) (defun shattering (start-time duration density &key			      (startampenv '(0.0 -32.0 0.5 -24.0 1.0 -32.0))			      (endampenv '(0.0 -35.0 0.5 -27.0 1.0 -35.0))			      (startmodindex '(0.0 0.75 0.5 2.0 1.0 0.75))			      (endmodindex '(0.0 0.25 0.5 1.5 1.0 0.25))			      (basefreq 100)			      (harmdista '(0.0 0.25 0.5 3.5 1.0 0.25))			      (panleft '(0.0 0.5 0.5 0.0 1.0 0.5))			      (panright '(0.0 0.5 0.5 1.0 1.0 0.5)))  (setf etimes (loop repeat density		collect (ran :type :bp :from start-time :below (+ start-time duration) )))  (setf esorted-times (new cycle of (sort etimes #'<)))  (loop repeat density    for etime = (next esorted-times)    for en = (/ (- etime start-time) duration)    for efreq = (* basefreq (+ (ran :type :poisson :a (interpl en harmdista)) 1))    do (pprint etime)    do (print "So far so good.")    append (shatter etime 1.0 50 :disttype :low-pass		    :startgrainfreq efreq		    :endgrainfreq efreq		    :startgrainamp (interpl en startampenv)		    :endgrainamp (interpl en endampenv)		    :startmod-index (interpl en startmodindex)		    :endmod-index (interpl en endmodindex)		    :varmod-index 0.3		    :pan (tendency en panleft panright))))(defun lump (start-time duration density &key		       (disttype :uniform)		       (startgraindur 0.1)		       (endgraindur 0.2)		       (vargraindur 0.01)		       (maxgrainamp -12.0)		       (vargrainamp 3.0)		       (mingrainfreq 100.0)		       (maxgrainfreq 100.0)		       (vargrainfreq 2)		       (pan 0.5)		       (mod-freq-ratio 2.0)		       (startmod-index 2.5)		       (endmod-index 0.5)		       (varmod-index 0.25))  (print "Inside lump")  (setf times (loop repeat density		collect (ran :type :bp :from start-time :below (+ start-time duration))))  (setf sorted-times (new cycle of (sort times #'<)))  (setf ampenv '(0.0 0.0 0.5 1.0 1.0 0.0))  (loop repeat density    for time = (next sorted-times)    for n = (/ (- time start-time) duration)    for graindur = (+ (* n (- endgraindur startgraindur)) 		      startgraindur		      (ran :type disttype :from (- vargraindur) :below vargraindur))    for grainamp = (+ maxgrainamp (* -32.0 (- 1 (interpl n ampenv))))    for mod-index = (+ (* n (- endmod-index startmod-index))		       startmod-index		       (ran :type disttype :from (- varmod-index) :below varmod-index))    for grainpan = (+ pan (/ (ran :type :gauss) 6))    for grainfreq = (+ (between mingrainfreq maxgrainfreq)		      (ran :type disttype :from (- vargrainfreq) :below vargrainfreq))    do (if (> grainpan 1) (setf grainpan 1))    do (if (< grainpan 0) (setf grainpan 0))    collect     (if (and mod-freq-ratio mod-index)	(new fmgrain	     :time time	     :graindur graindur	     :grainamp grainamp	     :graincarfreq grainfreq	     :grainmodfreq (* grainfreq mod-freq-ratio)	     :index (ran :type :gamma :a mod-index)	     :pan grainpan)      (new sinegrain	   :time time	   :graindur graindur	   :grainfreq grainfreq	   :grainamp grainamp	   :pan grainpan))    ))(defun lumping (start-time duration density &key			   (mindensityenv '(0.0 1500 0.5 50 1.0 1500))			   (maxdensityenv '(0.0 2500 0.5 100 1.0 2500))			   (mindurationenv '(0.0 15.0 0.5 5.0 1.0 15.0))			   (maxdurationenv '(0.0 20.0 0.5 10.0 1.0 20.0))			   (maxampenv '(0.0 -24.0 0.25 -18.0 0.5 -32.0 0.75 -18.0 1.0 -24.0))			   (startgraindur '(0.0 0.01 0.5 0.1 1.0 0.01))			   (endgraindur '(0.0 0.01 0.5 0.1 1.0 0.01))			   (vargraindur '(0.0 0.005 0.5 0.05 1.0 0.005))			   (startmodindex '(0.0 0.5 0.25 1.0 0.5 0.5 0.75 1.0 1.0 0.5))			   (endmodindex '(0.0 0.5 0.25 1.0 0.5 0.5 0.75 1.0 1.0 0.5))			   (varmodindex '(0.0 0.0 0.25 0.5 0.5 0.15 0.75 0.5 1.0 0.0))			   (mingrainfreq '(0.0 1000 0.25 700 0.5 200 0.75 800 1.0 1000))			   (maxgrainfreq '(0.0 2000 0.25 705 0.5 100 0.75 805 1.0 2000))			   (vargrainfreq '(0.0 10 0.2 100 0.25 2 0.5 50 0.7 100 0.75 2 1.0 10))			   (panleft '(0.0 1.0 0.5 0.5 1.0 1.0))			   (panright '(0.0 0.0 0.5 0.5 1.0 0.0)))  (setf ltimes (loop repeat density		collect (ran :type :u :from start-time :below (+ start-time duration) )))  (setf lsorted-times (new cycle of (sort ltimes #'<)))  (loop repeat density    for ltime = (next lsorted-times)    for ln = (/ (- ltime start-time) duration)    do (pprint ltime)    do (print "So far so good.")    append (lump ltime (tendency ln mindurationenv maxdurationenv) (tendency ln mindensityenv maxdensityenv) 		 :disttype :low-pass		 :mingrainfreq (interpl ln mingrainfreq)		 :maxgrainfreq (interpl ln maxgrainfreq)		 :vargrainfreq (interpl ln vargrainfreq)		 :maxgrainamp (interpl ln maxampenv)		 :startgraindur (interpl ln startgraindur)		 :endgraindur (interpl ln endgraindur)		 :vargraindur (interpl ln vargraindur)		 :startmod-index (interpl ln startmodindex)		 :endmod-index (interpl ln endmodindex)		 :varmod-index (interpl ln varmodindex)		 :pan (tendency ln panleft panright))))(print "Made it this far.")(setf part1 (shattering 0.0 200.0 100.0))(setf part2 (lumping 0.0 200 50.0))(print "Even made it this far.")(events (append part1 part2)	"final.sco"        :header '("f1 0 4096 10 1"                  "f2 0 4096 19 0.5 1 0 0"))(print "Did we make it this far?")